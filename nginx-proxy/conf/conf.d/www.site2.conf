# location [ = | ~ | ~* | ^~ ] uri { ... } [完全匹配｜区分大小正则匹配｜不区分大小正则匹配｜不再进行正则匹配]
# location @name { ... }
# location的配置有两种形式，前缀字符和正则。查找匹配的时候，先查找前缀字符，
# 选择最长匹配项，再查找正则。正则的优先级高于前缀字符。
# typedef enum {
#     NGX_HTTP_POST_READ_PHASE = 0,
#     NGX_HTTP_SERVER_REWRITE_PHASE,
#     NGX_HTTP_FIND_CONFIG_PHASE,
#     NGX_HTTP_REWRITE_PHASE,           //rewrite阶段在这里
#     NGX_HTTP_POST_REWRITE_PHASE,
#     NGX_HTTP_PREACCESS_PHASE,
#     NGX_HTTP_ACCESS_PHASE,
#     NGX_HTTP_POST_ACCESS_PHASE,
#     NGX_HTTP_TRY_FILES_PHASE,
#     NGX_HTTP_CONTENT_PHASE,
#     NGX_HTTP_LOG_PHASE
# } ngx_http_phases;
server {
    listen 80;
    server_name www.site2.com;
    default_type text/plain;

    location  = / {
        # 精确匹配 / ，主机名后面不能带任何字符串
        echo "Match: = /";
    }

    location  / {
        # 因为所有的地址都以 / 开头，所以这条规则将匹配到所有请求
        # 但是正则和最长字符串会优先匹配
        echo "Match: /";
    }

    location /documents/ {
        # 匹配任何以 /documents/ 开头的地址，匹配符合以后，还要继续往下搜索
        # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条
        echo "Match: /documents/";
    }

    location ~ /documents/Abc {
        # 匹配任何以 /documents/Abc 开头的地址，匹配符合以后，还要继续往下搜索
        # 只有后面的正则表达式没有匹配到时，这一条才会采用这一条
        echo "Match: /documents/Abc";
    }

    location ^~ /images/ {
        # 匹配任何以 /images/ 开头的地址，匹配符合以后，停止往下搜索正则，采用这一条。
        echo "Match:  ^~ /images/";
    }

    location ~* \.(gif|jpg|jpeg)$ {
        # 匹配所有以 gif,jpg或jpeg 结尾的请求
        echo "Match: (gif|jpg|jpeg)";
    }


    location /images/abc {
        # 最长字符匹配到 /images/abc，继续往下，会发现 ^~ 存在
        echo "Match: /images/abc";
    }

    location /images/abc/ {
        echo "Match: /images/abc/";    
    }

    location /last/ {
        rewrite ^/last/(.*) /test/$1 last; 
        echo "last page";
    }

    location /break/ {
        rewrite ^/break/(.*) /test/$1 break;
        echo "break page";
    }

    location /test/ {
        echo "test page";
    }
}

